(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{515:function(t,a,s){"use strict";s.r(a);var r=s(21),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mq"}},[t._v("#")]),t._v(" MQ")]),t._v(" "),s("h2",{attrs:{id:"本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本质"}},[t._v("#")]),t._v(" 本质")]),t._v(" "),s("h3",{attrs:{id:"一发一存一消费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一发一存一消费"}},[t._v("#")]),t._v(" 一发一存一消费")]),t._v(" "),s("p",[t._v("生产者先将消息投递一个叫做「队列」的容器中，然后再从这个容器中取出消息，最后再转发给消费者，仅此而已")]),t._v(" "),s("h2",{attrs:{id:"模型进化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模型进化"}},[t._v("#")]),t._v(" 模型进化")]),t._v(" "),s("h3",{attrs:{id:"队列模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列模型"}},[t._v("#")]),t._v(" 队列模型")]),t._v(" "),s("p",[t._v("这便是"),s("strong",[t._v("队列模型")]),t._v("：它允许多个生产者往同一个队列发送消息。但是，如果有多个消费者，实际上是竞争的关系，也就是一条消息只能被其中一个消费者接收到，读完即被删除。")]),t._v(" "),s("h3",{attrs:{id:"发布-订阅模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅模型"}},[t._v("#")]),t._v(" 发布-订阅模型")]),t._v(" "),s("p",[t._v("需求：如果需要将一份消息数据分发给多个消费者，并且每个消费者都要求收到全量的消息\n所以产生了发布-订阅模型，发布-订阅模型中，"),s("code",[t._v("存放消息的容器")]),t._v("变成了 "),s("code",[t._v("主题")]),t._v("，订阅者在接收消息之前需要先 "),s("code",[t._v("订阅主题")]),t._v("。最终，每个订阅者都可以收到同一个主题的全量消息。")]),t._v(" "),s("p",[t._v("仔细对比下它和 “队列模式” 的异同：生产者就是发布者，队列就是主题，消费者就是订阅者，无本质区别。唯一的不同点在于：一份消息数据是否可以被多次消费。")]),t._v(" "),s("h2",{attrs:{id:"透过模型看-mq-的应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#透过模型看-mq-的应用场景"}},[t._v("#")]),t._v(" 透过模型看 MQ 的应用场景")]),t._v(" "),s("p",[s("img",{attrs:{src:"D:%5Cproject%5Cvscode%5Cvuepress-theme-reco-demo%5Cmy-blog%5Cblogs%5C%E7%AC%94%E8%AE%B0%5C%E4%B8%AD%E9%97%B4%E4%BB%B6%5CMQ%E6%9C%AC%E8%B4%A8.assets%5C640",alt:"图片"}})]),t._v(" "),s("h3",{attrs:{id:"_1-系统解耦"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统解耦"}},[t._v("#")]),t._v(" 1. 系统解耦")]),t._v(" "),s("p",[t._v("生产者 和 消费者 解耦，生产者只和队列耦合，消费者只和队列耦合")]),t._v(" "),s("h3",{attrs:{id:"_2-异步通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-异步通信"}},[t._v("#")]),t._v(" 2. 异步通信")]),t._v(" "),s("p",[t._v("系统只需要关注更新订单状态，其他随带的状态更新，可以作为异步推送，能减少订单支付的整体耗时，提升订单系统的吞吐量")]),t._v(" "),s("h3",{attrs:{id:"_3-流量削峰"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-流量削峰"}},[t._v("#")]),t._v(" 3. 流量削峰")]),t._v(" "),s("p",[t._v("除此以外，由于队列能转储消息，对于超出系统承载能力的场景，可以用 MQ 作为 “漏斗” 进行限流保护，即所谓的流量削峰。")])])}),[],!1,null,null,null);a.default=_.exports}}]);