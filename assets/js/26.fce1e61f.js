(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{490:function(s,t,a){"use strict";a.r(t);var _=a(20),v=Object(_.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"b-树索引的由来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引的由来"}},[s._v("#")]),s._v(" B+树索引的由来")]),s._v(" "),a("p",[s._v("从前面讲的InnoDB数据页结构，特别是"),a("code",[s._v("页目录")]),s._v("，我们可以了解到，"),a("code",[s._v("记录")]),s._v("在"),a("code",[s._v("页")]),s._v("里面是以单链表的形式存在，而页与页之间构成了双向链表。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220215000137133.png",alt:"image-20220215000137133"}})]),s._v(" "),a("p",[s._v("那么我们应该采取什么样的方式来更高效查询数据呢？")]),s._v(" "),a("h6",{attrs:{id:"_1-我们先来假设不了解什么是索引-我们会怎么查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-我们先来假设不了解什么是索引-我们会怎么查找"}},[s._v("#")]),s._v(" "),a("strong",[s._v("1.我们先来假设不了解什么是"),a("code",[s._v("索引")]),s._v("，我们会怎么查找？")])]),s._v(" "),a("p",[s._v("比如根据"),a("strong",[s._v("主键条件搜索")]),s._v("，可以再页目录中用二分查找查到属于那条记录")]),s._v(" "),a("p",[a("strong",[s._v("如果是非主键列呢")]),s._v("，因为在数据页中并没有对非主键列建立所谓的 "),a("code",[s._v("页目录")]),s._v("，可能要一个一个按顺序找，知道找到匹配的记录")]),s._v(" "),a("h6",{attrs:{id:"_2-如果在很多页中查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如果在很多页中查找"}},[s._v("#")]),s._v(" "),a("strong",[s._v("2.如果在很多页中查找？")])]),s._v(" "),a("p",[s._v("大部分情况下我们表中存放的记录都是非常多的，需要好多的数据页来存储这些记录。在很多页中查找记录的话可以分为两个步骤：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("定位到记录所在的页。")])]),s._v(" "),a("li",[a("p",[s._v("从所在的页内中查找相应的记录。")]),s._v(" "),a("p",[s._v("在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚唠叨过的查找方式去查找指定的记录。因为要遍历所有的数据页，所以这种方式显然是超级耗时的，如果一个表有一亿条记录，使用这种方式去查找记录那要等到猴年马月才能等到查找结果。所以祖国和人民都在期盼一种能高效完成搜索的方法， "),a("code",[s._v("索引")]),s._v("同志就要亮相登台了。")])])]),s._v(" "),a("h2",{attrs:{id:"b-树索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引"}},[s._v("#")]),s._v(" B+树索引")]),s._v(" "),a("p",[s._v("我们现在就遇到了个难题，在一个数据页里面根据主键查询记录，可以很快的查询出来，但是数据库的数据会越来越多，数据页也会越来越多，页与页之间现在没有办法根据主键查到记录属于哪个页？")]),s._v(" "),a("p",[s._v("要是能像一个数据页里面根据二分法查记录就好，咦！没错，就是这个思路！")]),s._v(" "),a("p",[s._v("设计InnoDB的大叔，给多个数据页分配了各自的目录，方便查找到某个数据页，比如下面")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220215002010727.png",alt:"image-20220215002010727"}})]),s._v(" "),a("blockquote",[a("p",[s._v("就像一本字典，大部分装着对单词的解释（数据页），前面一部分是目录（存放目录项记录的数据页），都占据着书本的空间，但是起到方便查找的作用")])]),s._v(" "),a("p",[s._v("从图中可以看出来，我们新分配了一个编号为 30 的页来专门存储 目录项记录 。这里再次强调一遍 "),a("code",[s._v("目录项记录")]),s._v("和普通的 "),a("code",[s._v("用户记录")]),s._v(" 的不同点：")]),s._v(" "),a("ul",[a("li",[s._v("目录项记录 的 record_type 值是1，而普通用户记录的 record_type 值是0。")]),s._v(" "),a("li",[s._v("目录项记录 "),a("strong",[s._v("只有主键值和页的编号两个列")]),s._v("，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有 InnoDB 自己添加的隐藏列。")]),s._v(" "),a("li",[s._v("还记得我们之前在唠叨记录头信息的时候说过一个叫 min_rec_mask 的属性么，只有在存储 目录项记录 的页中的主键值最小的 目录项记录 的 min_rec_mask 值为 1 ，其他别的记录的 min_rec_mask 值都是 0 。")])]),s._v(" "),a("p",[s._v("除了上述几点外，这两者就没啥差别了，它们用的是一样的数据页（页面类型都是 0x45BF ，这个属性在 File Header 中，忘了的话可以翻到前边的文章看），页的组成结构也是一样一样的（就是我们前边介绍过的7个部分），都会为主键值生成 "),a("code",[s._v("Page Directory")]),s._v(" （页目录），从而在按照主键值进行查找时可以使用二分法来加快查询速度。现在以查找主键为 "),a("code",[s._v("20")]),s._v("的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：")]),s._v(" "),a("ol",[a("li",[s._v("先到存储 "),a("code",[s._v("目录项记录")]),s._v(" 的页，也就是页 "),a("code",[s._v("30")]),s._v(" 中通过二分法快速定位到对应目录项，因为 12 < 20 < 209 ，所\n以定位到对应的记录所在的页就是 "),a("code",[s._v("页9")]),s._v("。")]),s._v(" "),a("li",[s._v("再到存储用户记录的 "),a("code",[s._v("页9")]),s._v(" 中根据二分法快速定位到主键值为 20 的用户记录。")])]),s._v(" "),a("p",[s._v("虽然说 目录项记录 中只存储主键值和对应的页号，比用户记录需要的存储空间小多了，但是不论怎么说一个页只有 16KB 大小，能存放的 目录项记录 也是有限的，那如果表中的数据太多，以至于一个数据页不足以存放所有的 "),a("code",[s._v("目录项记录")]),s._v("，该咋办呢？")]),s._v(" "),a("p",[s._v("当然是再多整一个存储 目录项记录 的页喽～ 为了大家更好的理解"),a("strong",[s._v("新分配一个 目录项记录 页的过程")]),s._v("，我们假设一个存储 目录项记录 的页最多只能存放4条 目录项记录 （请注意是假设哦，真实情况下可以存放好多条的），所以如果此时我们再向上图中插入一条主键值为 320 的用户记录的话，那就需要分配一个新的存储 目录项记录的页喽：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220215002403250.png",alt:"image-20220215002403250"}})]),s._v(" "),a("p",[s._v("更多记录的话，或者变成这种：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220215002523412.png",alt:"image-20220215002523412"}})]),s._v(" "),a("p",[a("strong",[s._v("注意：下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。")])]),s._v(" "),a("p",[s._v("实际上这种树状结构的数据，或者说一种数据结构，这就是"),a("code",[s._v("B+树")])]),s._v(" "),a("p",[s._v("不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到 B+ 树这个数据结构中了，所以我们也称这些数据页为 节点 。从图中可以看出来，"),a("strong",[s._v("我们的实际用户记录其实都存放在B+树的最底层的节点上")]),s._v("，这些节点也被称为 叶子节点 或 叶节点 ，其余用来存放 目录项 的节点称为 非叶子节点 或者 内节点 ，其中 B+ 树最上边的那个节点也称为 根节点 。")]),s._v(" "),a("h2",{attrs:{id:"索引分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引分类"}},[s._v("#")]),s._v(" 索引分类")]),s._v(" "),a("p",[s._v("按照不同的排序规则分索引类型")]),s._v(" "),a("h3",{attrs:{id:"聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引"}},[s._v("#")]),s._v(" 聚簇索引")]),s._v(" "),a("ol",[a("li",[s._v("使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("页内的记录是按照主键的大小顺序排成一个单向链表")]),s._v("。")]),s._v(" "),a("li",[s._v("各个存放用户记录的页也是根据页中"),a("strong",[s._v("用户记录的主键大小顺序排成一个双向链表")]),s._v("。")]),s._v(" "),a("li",[s._v("存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中"),a("strong",[s._v("目录项记录的主键大小顺序排成一个双向链表")]),s._v("。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("B+ 树的叶子节点存储的是完整的用户记录。")]),s._v(" "),a("p",[s._v("所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。")]),s._v(" "),a("p",[s._v("我们把具有这两种特性的 B+ 树称为 聚簇索引 ，"),a("strong",[s._v("所有完整的用户记录都存放在这个 聚簇索引 的叶子节点处")]),s._v("。这种 聚簇索引 并不需要我们在 MySQL 语句中显式的使用 INDEX 语句去创建（后边会介绍索引相关的语句），InnoDB 存储引擎会自动的为我们创建聚簇索引。另外有趣的一点是，在 InnoDB 存储引擎中， 聚簇索引 就是数据的存储方式（所有的用户记录都存储在了 叶子节点 ），也就是所谓的"),a("strong",[s._v("索引即数据，数据即索引")]),s._v("。")])])]),s._v(" "),a("p",[s._v("二级索引")]),s._v(" "),a("p",[s._v("比方说我们用 c2 列（非主键列）的大小作为数据页、页中记录的排序规则，再建一棵 B+ 树。")]),s._v(" "),a("p",[s._v("这个 B+ 树与上边介绍的聚簇索引有"),a("strong",[s._v("几处不同")]),s._v("：")]),s._v(" "),a("ol",[a("li",[s._v("使用记录 c2 列的大小进行记录和页的排序，这包括三个方面的含义：")])]),s._v(" "),a("ul",[a("li",[s._v("页内的记录是按照 c2 列的大小顺序排成一个单向链表。")]),s._v(" "),a("li",[s._v("各个存放用户记录的页也是根据页中记录的 c2 列大小顺序排成一个双向链表。")]),s._v(" "),a("li",[s._v("存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的 c2 列大小顺序排成一个双向链表。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("B+ 树的叶子节点存储的并不是完整的用户记录，而只是 c2列+主键 这两个列的值。"),a("strong",[s._v("目录项记录中不再是 主键+页号 的搭配，而变成了 c2列+页号 的搭配。")])])]),s._v(" "),a("p",[s._v("查询逻辑也有不同，需要先根据c2列的值，去有关c2列建的二级索引里面查所在记录的主键的值，然后再去聚簇索引查询主键所在记录，这个过程叫做"),a("code",[s._v("回表")])]),s._v(" "),a("h3",{attrs:{id:"联合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合索引"}},[s._v("#")]),s._v(" 联合索引")]),s._v(" "),a("p",[s._v("我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让 B+ 树按照 c2和 c3 列的大小进行排序，这个包含两层含义：")]),s._v(" "),a("ul",[a("li",[s._v("先把各个记录和页按照 c2 列进行排序。")]),s._v(" "),a("li",[s._v("在记录的 c2 列相同的情况下，采用 c3 列进行排序")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220215004242885.png",alt:"image-20220215004242885"}})]),s._v(" "),a("p",[s._v("如图所示，我们需要注意一下几点：")]),s._v(" "),a("ul",[a("li",[s._v("每条 目录项记录 都由 c2 、 c3 、 页号 这三个部分组成，各条记录先按照 c2 列的值进行排序，如果记录的 c2 列相同，则按照 c3 列的值进行排序。")]),s._v(" "),a("li",[s._v("B+ 树叶子节点处的用户记录由 c2 、 c3 和主键 c1 列组成。")]),s._v(" "),a("li",[s._v("千万要注意一点，以c2和c3列的大小为排序规则建立的B+树称为联合索引，本质上也是一个二级索引。它的意思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下：")]),s._v(" "),a("li",[s._v("建立 联合索引 只会建立如上图一样的"),a("strong",[s._v("1棵 B+ 树")]),s._v("。")]),s._v(" "),a("li",[s._v("为c2和c3列分别建立索引会分别以 c2 和 c3 列的大小为排序规则"),a("strong",[s._v("建立2棵 B+ 树")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"mysql中创建和删除索引的语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql中创建和删除索引的语句"}},[s._v("#")]),s._v(" MySQL中创建和删除索引的语句")]),s._v(" "),a("p",[s._v("我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" TALBE 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" \n   各种列的信息 ··· "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  \n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 索引名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("需要被索引的单个列或多个列"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("其中的 KEY 和 INDEX 是同义词，任意选用一个就可以。我们也可以在修改表结构的时候添加索引：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 索引名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("需要被索引的单个列或多个列"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可以在修改表结构的时候删除索引：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 索引名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("比方说我们想在创建 index_demo 表的时候就为 c2 和 c3 列添加一个 联合索引 ，可以这么写建表语句：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" index_demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" \n   c1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n   c2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n   c3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" idx_c2_c3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在这个建表语句中我们创建的索引名是 idx_c2_c3 ，这个名称可以随便起，不过我们还是建议以 idx_ 为前缀，后边跟着需要建立索引的列名，多个列名之间用下划线 _ 分隔开。如果我们想删除这个索引，可以这么写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" index_demo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" idx_c2_c3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("总结：就是套中套，"),a("code",[s._v("数据页")]),s._v("根据"),a("code",[s._v("页目录")]),s._v("来二分查找记录，然后再给页建个目录，好听点叫"),a("code",[s._v("索引")]),s._v("，这样查找的顺序就是先去装有"),a("code",[s._v("目录项的数据页")]),s._v("查询到哪个"),a("code",[s._v("数据页")]),s._v("，然后"),a("code",[s._v("数据页")]),s._v("中，根据"),a("code",[s._v("页目录")]),s._v("查询"),a("code",[s._v("记录")]),s._v("，注意非主键条件，存在回表操作！")])])}),[],!1,null,null,null);t.default=v.exports}}]);