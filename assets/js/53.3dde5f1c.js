(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{516:function(n,s,e){"use strict";e.r(s);var t=e(20),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"springboot-深入解析-监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot-深入解析-监听器"}},[n._v("#")]),n._v(" springboot 深入解析 监听器")]),n._v(" "),e("h3",{attrs:{id:"文章目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文章目录"}},[n._v("#")]),n._v(" 文章目录")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#_1"}},[n._v("监听器")])]),n._v(" "),e("li",[e("ul",[e("li",[e("a",{attrs:{href:"#_2"}},[n._v("一、监听器模式介绍")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#_189"}},[n._v("二、系统监听器介绍")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#_282"}},[n._v("三：监听事件触发机制")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#_483"}},[n._v("四：自定义监听器")])])])])]),n._v(" "),e("h1",{attrs:{id:"监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监听器"}},[n._v("#")]),n._v(" 监听器")]),n._v(" "),e("h2",{attrs:{id:"一、监听器模式介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、监听器模式介绍"}},[n._v("#")]),n._v(" 一、监听器模式介绍")]),n._v(" "),e("p",[n._v("监听器模式可以用下图来体现："),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329152324549.png",alt:""}})]),n._v(" "),e("p",[n._v("当运行到关键节点的时候，系统会通过广播器发布相应的事件，而我们系统中存在一些监听器，它们会订阅一些 “感兴趣”（实际是人为设定）的事件。")]),n._v(" "),e("p",[n._v("当有事件发布之后，相关的监听器会监听到订阅的事件，进而触发相关的 “行为”（实际上就是处理事件）。")]),n._v(" "),e("p",[n._v("其实可以理解成 发布 - 订阅的一种形式。")]),n._v(" "),e("p",[n._v("监听器模式主要有四个要素")]),n._v(" "),e("ul",[e("li",[n._v("事件")]),n._v(" "),e("li",[n._v("监听器")]),n._v(" "),e("li",[n._v("广播器")]),n._v(" "),e("li",[n._v("触发机制")])]),n._v(" "),e("p",[n._v("下面我们手动实现一下：")]),n._v(" "),e("p",[e("strong",[n._v("事件对象")])]),n._v(" "),e("p",[n._v("创建一个天气事件的抽象类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract class WeatherEvent {\n\n\t// 获得当前天气\n    public abstract String getWeather();\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("接下来定义两个事件，下雨事件和下雪事件。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class RainEvent extends WeatherEvent {\n    @Override\n    public String getWeather() {\n        return "rain";\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class SnowEvent extends WeatherEvent {\n    @Override\n    public String getWeather() {\n        return "snow";\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[e("strong",[n._v("监听器")])]),n._v(" "),e("p",[n._v("下面定义我们的事件监听器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface WeatherListener {\n\n    void onWeatherEvent(WeatherEvent event);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("下雪的事件监听器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.stereotype.Component;\n\n@Component\npublic class SnowListener implements WeatherListener {\n    @Override\n    public void onWeatherEvent(WeatherEvent event) {\n        if (event instanceof SnowEvent) {\n            System.out.println("hello " + event.getWeather());\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("下雨的事件监听器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.stereotype.Component;\n\n@Component\npublic class RainListener implements WeatherListener {\n    @Override\n    public void onWeatherEvent(WeatherEvent event) {\n        if (event instanceof RainEvent) {\n            System.out.println("hello " + event.getWeather());\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[e("strong",[n._v("广播器")])]),n._v(" "),e("p",[n._v("下面定义我们的事件广播器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface EventMulticaster {\n\t\n\t// 广播事件\n    void multicastEvent(WeatherEvent event);\n\t\n\t// 添加监听器\n    void addListener(WeatherListener weatherListener);\n\n\t//移除监听器\n    void removeListener(WeatherListener weatherListener);\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("定义一个模板类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@Component\npublic abstract class AbstractEventMulticaster implements EventMulticaster {\n\n    private List<WeatherListener> listenerList = new ArrayList<>();\n\n    @Override\n    public void multicastEvent(WeatherEvent event) {\n        doStart();\n        listenerList.forEach(i -> i.onWeatherEvent(event));\n        doEnd();\n    }\n\n    @Override\n    public void addListener(WeatherListener weatherListener) {\n        listenerList.add(weatherListener);\n    }\n\n    @Override\n    public void removeListener(WeatherListener weatherListener) {\n        listenerList.remove(weatherListener);\n    }\n\n    abstract void doStart();\n\n    abstract void doEnd();\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br")])]),e("p",[n._v("定义实现类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.stereotype.Component;\n\n@Component\npublic class WeatherEventMulticaster extends AbstractEventMulticaster {\n\n    @Override\n    void doStart() {\n        System.out.println("begin broadcast weather event");\n    }\n\n    @Override\n    void doEnd() {\n        System.out.println("end broadcast weather event");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("测试方法 "),e("strong",[n._v("含触发机制")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Test {\n\n    public static void main(String[] args) {\n        WeatherEventMulticaster eventMulticaster = new WeatherEventMulticaster();\n        RainListener rainListener = new RainListener();\n        SnowListener snowListener = new SnowListener();\n        eventMulticaster.addListener(rainListener);\n        eventMulticaster.addListener(snowListener);\n        eventMulticaster.multicastEvent(new SnowEvent());\n        eventMulticaster.multicastEvent(new RainEvent());\n        eventMulticaster.removeListener(rainListener);\n        eventMulticaster.multicastEvent(new SnowEvent());\n        eventMulticaster.multicastEvent(new RainEvent());\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("结果：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("begin broadcast weather event\nhello snow\nend broadcast weather event\nbegin broadcast weather event\nhello rain\nend broadcast weather event\nbegin broadcast weather event\nhello snow\nend broadcast weather event\nbegin broadcast weather event\nend broadcast weather event\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("h2",{attrs:{id:"二、系统监听器介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、系统监听器介绍"}},[n._v("#")]),n._v(" 二、系统监听器介绍")]),n._v(" "),e("p",[n._v("下面看一下 Springboot 中的监听器是什么样的情况。")]),n._v(" "),e("p",[n._v("springboot 中的"),e("strong",[n._v("系统监听器")]),n._v("是 ApplicationListener"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329155613259.png",alt:""}}),e("br"),n._v("\nspringboot 的监听器通过继承这个接口来实现监听器，这个接口是基于监听器模式的标准进行设计的。在 spring3.0 之后，监听器可以订阅自己感兴趣的事件，当监听器注入到 spring 容器中之后，在程序运行的一些关键节点，会有事件的发生，订阅相关事件的系统监听器会被触发。")]),n._v(" "),e("p",[n._v("这个接口继承自 EventListener ，看到源码，你会发现这个接口仅仅是一个声明。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * A tagging interface that all event listener interfaces must extend.\n * @since JDK1.1\n */\npublic interface EventListener {\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("回到 ApplicationListener。你会看到函数式接口的注解，我之间写了一篇关于 Lamdda 表达式的长文，你可以找来看看。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@FunctionalInterface\npublic interface ApplicationListener<E extends ApplicationEvent> extends EventListener {\n\n\t/**\n\t * Handle an application event.\n\t * @param event the event to respond to\n\t */\n\tvoid onApplicationEvent(E event);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("下面看一下"),e("strong",[n._v("系统广播器")]),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/2020032916084898.png",alt:""}}),e("br"),n._v("\n这个接口主要就是管理事件监听器并且广播事件")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface ApplicationEventMulticaster {\n\n\t// 添加一个系统监听器\n\tvoid addApplicationListener(ApplicationListener<?> listener);\n\t\n\t// 同上 不过是通过全限定类名获取\n\tvoid addApplicationListenerBean(String listenerBeanName);\n\n\t// 移除相关系统监听器\n\tvoid removeApplicationListener(ApplicationListener<?> listener);\n\n\t// 同上 不过是通过全限定类名获取\n\tvoid removeApplicationListenerBean(String listenerBeanName);\n\n\t// 移除所有系统监听器\n\tvoid removeAllListeners();\n\t\n\t// 下面两个都是广播事件的方法\n\tvoid multicastEvent(ApplicationEvent event);\n\n\tvoid multicastEvent(ApplicationEvent event, @Nullable ResolvableType eventType);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br")])]),e("p",[e("strong",[n._v("系统事件")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329161548651.png",alt:""}}),e("br"),n._v("\n最顶层是 EventObject 代表事件对象，ApplicationEvent 代表应用事件。SpringApplicationEvent 代表是 Spring 当中的应用事件，它这这种集成体系实现了分层描述。")]),n._v(" "),e("ul",[e("li",[n._v("ApplicationPreparedEvent – 代表应用准备好")]),n._v(" "),e("li",[n._v("ApplicationStartingEvent – 代表应用已经启动")]),n._v(" "),e("li",[n._v("ApplicationFailedEvent – 代表应用失败")]),n._v(" "),e("li",[n._v("…")])]),n._v(" "),e("p",[n._v("这与刚才定义的下雪事件和下雨事件类似。每一个 Event 都对应一类事件。")]),n._v(" "),e("p",[e("strong",[n._v("事件发送顺序")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329162245534.png",alt:""}})]),n._v(" "),e("ol",[e("li",[n._v("首先框架启动之后，会发生 start 事件")]),n._v(" "),e("li",[n._v("在环境准备好之后触发 environmentPrepared 事件。（相关属性已经加载到容器内）")]),n._v(" "),e("li",[n._v("springboot 准备好上下文之后，触发 contextInitialized 事件")]),n._v(" "),e("li",[n._v("应用上下文创建完毕，但是 bean 还没有加载完成，这个时候会触发 prepared 事件")]),n._v(" "),e("li",[n._v("当 bean 实例化完成之后，但是还没有调用 SpringApplication 的 run 方法，会触发 started 事件")]),n._v(" "),e("li",[n._v("当 run 方法调用之后，会触发 ready 事件")])]),n._v(" "),e("p",[n._v("在整个过程中，如果出现失败会触发 failed 事件。")]),n._v(" "),e("p",[e("strong",[n._v("监听器注册")])]),n._v(" "),e("p",[n._v("在系统初始化器那一篇文章中，我们通过看源码，发现系统初始化器的是通过加载 META-INF 目录下的 spring.factories 文件实现最终注入到 spring 容器的。")]),n._v(" "),e("p",[n._v("我们用相同的方式去探究："),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329163049224.png",alt:""}}),e("br"),n._v("\n一直定位一下去，发现这五行代码基本一样，是采用 SpringFactoriesLoader.loadFactoryNames 走的。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329163146423.png",alt:""}}),e("br"),n._v("\n区别传入的 type 不一样。系统监听器的是 ApplicationListener.class"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329163513223.png",alt:""}}),e("br"),n._v("\n上述过程可以用这张图来概述："),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329163424915.png",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"三-监听事件触发机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-监听事件触发机制"}},[n._v("#")]),n._v(" 三：监听事件触发机制")]),n._v(" "),e("p",[n._v("第二部分，我们过了监听器如何被加载的源码，这一部分我们从 run 方法着手去探究事件触发机制。")]),n._v(" "),e("p",[n._v("考虑到不同事件的触发机制大同小异，这里就以一个作为入口，过一遍。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329164133969.png",alt:""}}),e("br"),n._v("\n定位到 listeners.starting() 方法内部"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329164354618.png",alt:""}}),e("br"),n._v("\n我们看一下 SpringApplicationRunListener 是什么样的"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329164528959.png",alt:""}}),e("br"),n._v("\n你会发现它定义了各个阶段的事件。")]),n._v(" "),e("p",[n._v("我们回到 starting() 方法"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329164751617.png",alt:""}}),e("br"),n._v("\n通过 debug 可以看到，运行期类的是"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329165343463.png",alt:""}}),e("br"),n._v("\n定位到 EventPubLishingRunListener 的源码，发现它调用了广播器发送了相应的事件。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200329165451139.png",alt:""}}),e("br"),n._v("\n这种机制使得监听器的内部实现与外部的调用隔离开了。")]),n._v(" "),e("p",[n._v("你可能在这里有点迷惑，我在这里的时候也迷惑了。以最初的例子为例，进行一个改造。")]),n._v(" "),e("p",[n._v("我们定义一个 WeatherRunListener")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Component\npublic class WeatherRunListener {\n\n    @Autowired\n    private WeatherEventMulticaster eventMulticaster;\n\n    public void snow() {\n        eventMulticaster.multicastEvent(new SnowEvent());\n    }\n\n    public void rain() {\n        eventMulticaster.multicastEvent(new RainEvent());\n    }\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("改造之前的模板类，采用注入的形式。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Autowired\n    private List<WeatherListener> listenerList;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("我们同样测试一下")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@SpringBootTest\nclass DemoApplicationTests {\n\n\n    @Autowired\n    private WeatherRunListener weatherRunListener;\n\n    @Test\n    void contextLoads() {\n        weatherRunListener.rain();\n        weatherRunListener.snow();\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("p",[n._v("结果")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("begin broadcast weather event\nhello rain\nend broadcast weather event\nbegin broadcast weather event\nhello snow\nend broadcast weather event\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("这种方式 不是 spring 处理的基本上一样嘛")]),n._v(" "),e("p",[n._v("接下来进入 调用广播器的 starting 方法。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public void starting() {\n        this.initialMulticaster.multicastEvent(new ApplicationStartingEvent(this.application, this.args));\n    }\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("进入 multicastEvent 方法，发现是同名方法。resolveDefaultEventType 方法功能是获取事件的 class 对象的包装。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200329171518250.png",alt:""}}),e("br"),n._v("\n继续走，发现这里创建线程池去处理一些事情")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329171627964.png",alt:""}}),e("br"),n._v("\n定位 getApplicationListeners(event, type) 方法的源码")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected Collection<ApplicationListener<?>> getApplicationListeners(\n            ApplicationEvent event, ResolvableType eventType) {\n \n \t\t// 　获得事件的来源Object source = event.getSource();  \n \t\t// source其实是SpringApplication\n        Object source = event.getSource();\n        Class<?> sourceType = (source != null ? source.getClass() : null);\n        // 如果已经在缓存中存在感兴趣的监听器，直接返回\n        ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType);\n \n        // Quick check for existing entry on ConcurrentHashMap...\n        ListenerRetriever retriever = this.retrieverCache.get(cacheKey);\n        if (retriever != null) {\n            return retriever.getApplicationListeners();\n        }\n \n        if (this.beanClassLoader == null ||\n                (ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&\n                        (sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {\n            // Fully synchronized building and caching of a ListenerRetriever\n            synchronized (this.retrievalMutex) {\n                retriever = this.retrieverCache.get(cacheKey);\n                if (retriever != null) {\n                    return retriever.getApplicationListeners();\n                }\n                retriever = new ListenerRetriever(true);\n                Collection<ApplicationListener<?>> listeners =\n                        retrieveApplicationListeners(eventType, sourceType, retriever);\n                this.retrieverCache.put(cacheKey, retriever);\n                return listeners;\n            }\n        }\n        else {\n            // No ListenerRetriever caching -> no synchronization necessary\n            return retrieveApplicationListeners(eventType, sourceType, null);\n        }\n    }\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br")])]),e("p",[n._v("这里最核心的方法是 retrieveApplicationListeners() 方法")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private Collection<ApplicationListener<?>> retrieveApplicationListeners(\n        ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {\n \n    List<ApplicationListener<?>> allListeners = new ArrayList<>();\n    Set<ApplicationListener<?>> listeners;\n    Set<String> listenerBeans;\n\t// 同步方法（防止多线程进入） 获取spring容器加载进来的监听器的实现\n    synchronized (this.retrievalMutex) {\n        listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners);\n        listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans);\n    }\n    \n    // 遍历监听器\n    for (ApplicationListener<?> listener : listeners) {\n    \t// 是否对该事件感兴趣（底层调用 instanceOf方法）\n        if (supportsEvent(listener, eventType, sourceType)) {\n            if (retriever != null) {\n            \t// 感兴趣的话 会加入集合当中\n                retriever.applicationListeners.add(listener);\n            }\n            allListeners.add(listener);\n        }\n    }\n    \n\n    if (!listenerBeans.isEmpty()) {\n        BeanFactory beanFactory = getBeanFactory();\n        for (String listenerBeanName : listenerBeans) {\n            try {\n                Class<?> listenerType = beanFactory.getType(listenerBeanName);\n                if (listenerType == null || supportsEvent(listenerType, eventType)) {\n                    ApplicationListener<?> listener =\n                            beanFactory.getBean(listenerBeanName, ApplicationListener.class);\n                    if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {\n                        if (retriever != null) {\n                            if (beanFactory.isSingleton(listenerBeanName)) {\n                                retriever.applicationListeners.add(listener);\n                            }\n                            else {\n                                retriever.applicationListenerBeans.add(listenerBeanName);\n                            }\n                        }\n                        allListeners.add(listener);\n                    }\n                }\n            }\n            catch (NoSuchBeanDefinitionException ex) {\n                // Singleton listener instance (without backing bean definition) disappeared -\n                // probably in the middle of the destruction phase\n            }\n        }\n    }\n\t// 对监听器进行一个排序（按照order值）\n    AnnotationAwareOrderComparator.sort(allListeners);\n    if (retriever != null && retriever.applicationListenerBeans.isEmpty()) {\n        retriever.applicationListeners.clear();\n        retriever.applicationListeners.addAll(allListeners);\n    }\n    // 返回集合\n    return allListeners;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br")])]),e("p",[n._v("getApplicationListeners(event, type) 方法其实就是 获得对当前 event 感兴趣的监听器列表。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329175747612.png",alt:""}}),e("br"),n._v("\nsupportsEvent(listener, eventType, sourceType) 方法的内部实现大概是这个流程，最核心的两个方法是 supportsEventType 和 supportsSourceType。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329175855150.png",alt:""}})]),n._v(" "),e("p",[n._v("回到之前的步骤：我们现在已经获取到当前 event 感兴趣的监听器列表。")]),n._v(" "),e("p",[n._v("下面依次进行触发即可。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329173516559.png",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"四-自定义监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-自定义监听器"}},[n._v("#")]),n._v(" 四：自定义监听器")]),n._v(" "),e("p",[n._v("创建一个包 listener")]),n._v(" "),e("p",[n._v("定义我们的监听器，方式与系统初始化器基本上一致，不再深入探讨，看效果吧。")]),n._v(" "),e("p",[n._v("第一种方式：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.boot.context.event.ApplicationStartedEvent;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.core.annotation.Order;\n\n@Order(1)\npublic class FirstListener implements ApplicationListener<ApplicationStartedEvent> {\n    @Override\n    public void onApplicationEvent(ApplicationStartedEvent event) {\n        System.out.println("hello first");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("在 META-INF 下的 spring.factories 中添加自定义监听器的全限定名")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("org.springframework.context.ApplicationListener=com.example.demo.listener.FirstListener\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("运行发现，注册监听器成功。"),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329181025311.png",alt:""}}),e("br"),n._v("\n下面看第二种方式：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.boot.context.event.ApplicationStartedEvent;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.core.annotation.Order;\n\n@Order(2)\npublic class SecondListener implements ApplicationListener<ApplicationStartedEvent> {\n    @Override\n    public void onApplicationEvent(ApplicationStartedEvent event) {\n        System.out.println("hello second");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("更改启动类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//        SpringApplication.run(DemoApplication.class, args);\n        SpringApplication springApplication = new SpringApplication(DemoApplication.class);\n        springApplication.addListeners(new SecondListener());\n        springApplication.run(args);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("结果："),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329181229449.png",alt:""}}),e("br"),n._v("\n第三种方式：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.boot.context.event.ApplicationStartedEvent;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.core.annotation.Order;\n\n@Order(3)\npublic class ThirdListener implements ApplicationListener<ApplicationStartedEvent> {\n    @Override\n    public void onApplicationEvent(ApplicationStartedEvent event) {\n        System.out.println("hello third");\n    }\n\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("在 application.properties 文件中添加")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("context.listener.classes=com.example.demo.listener.ThirdListener\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("启动")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/20200329181503455.png",alt:""}})]),n._v(" "),e("p",[n._v("第四种方式：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import org.springframework.boot.context.event.ApplicationPreparedEvent;\nimport org.springframework.boot.context.event.ApplicationStartedEvent;\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.event.SmartApplicationListener;\nimport org.springframework.core.annotation.Order;\n\n@Order(4)\npublic class FourthListener implements SmartApplicationListener {\n\n\t// 对哪一些事件感兴趣\n    @Override\n    public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {\n        return ApplicationStartedEvent.class.isAssignableFrom(eventType) || ApplicationPreparedEvent.class.isAssignableFrom(eventType);\n    }\n\n\t// 事件发生后，我们做一些什么事情\n    @Override\n    public void onApplicationEvent(ApplicationEvent event) {\n        System.out.println("hello fourth");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])]),e("p",[n._v("以上三种方式 任选一种注入到 spring 容器中，我这里选择第一种方式")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("context.listener.classes=com.example.demo.listener.ThirdListener,com.example.demo.listener.FourthListener\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("结果："),e("br"),n._v(" "),e("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/2020032918194499.png",alt:""}}),e("br"),n._v("\n实现 Applicationlistene 接口针对单一事件监听")]),n._v(" "),e("p",[n._v("实现 SmartApplicationlistener 接口针对多种事件监听")])])}),[],!1,null,null,null);s.default=a.exports}}]);