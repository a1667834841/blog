(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{568:function(e,v,t){"use strict";t.r(v);var _=t(20),l=Object(_.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("在阅读详细文档之前我们先来谈谈我自己对maven的一些个人理解，以助于从整体大局上了解maven。")]),e._v(" "),t("ul",[t("li",[e._v("maven是什么，用通俗的话来将，maven能帮你构建工程，管理jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目")]),e._v(" "),t("li",[e._v("使用maven构建的项目均可以直接使用maven build完成项目的编译测试打包，无需额外配置")]),e._v(" "),t("li",[e._v("Maven是通过pom.xml来执行任务的，其中的build标签描述了如何来编译及打包项目，而具体的编译和打包工作是通过build中配置的 plugin 来完成。当然plugin配置不是必须的，默认情况下，Maven 会绑定以下几个插件来完成基本操作。")]),e._v(" "),t("li",[t("img",{attrs:{src:"https://img-blog.csdn.net/20180328145612540",alt:"img"}})])]),e._v(" "),t("p",[e._v("即在没有配置的情况下，执行mvn clean install时，maven会调用默认的plugin来完成编译打包操作，具体来讲，执行mvn clean install时会执行")]),e._v(" "),t("p",[e._v("maven-clean-plugin:2.5:clean (default-clean)")]),e._v(" "),t("p",[e._v("maven-resources-plugin:2.6:resources (default-resources)")]),e._v(" "),t("p",[e._v("maven-compiler-plugin:3.1:compile (default-compile)")]),e._v(" "),t("p",[e._v("maven-resources-plugin:2.6:testResources (default-testResources)")]),e._v(" "),t("p",[e._v("maven-compiler-plugin:3.1:testCompile (default-testCompile)")]),e._v(" "),t("p",[e._v("maven-surefire-plugin:2.12.4:test (default-test)")]),e._v(" "),t("p",[e._v("maven-jar-plugin:2.4:jar (default-jar)")]),e._v(" "),t("p",[e._v("maven-install-plugin:2.4:install (default-install)")]),e._v(" "),t("p",[e._v("等plugin")]),e._v(" "),t("ul",[t("li",[e._v("4.如果有需要可以针对各个 plugin 进行特殊配置，需要在pom.xml中的"),t("plugins",[e._v("标签中显示指定 plugin 和 属性配置。")])],1),e._v(" "),t("li",[t("img",{attrs:{src:"https://img-blog.csdn.net/20180328145654479",alt:"img"}})])]),e._v(" "),t("p",[e._v("如上配置了maven-compiler-plugin的版本和编译时使用的jdk版本")]),e._v(" "),t("p",[e._v("POM.XML的build标签")]),e._v(" "),t("p",[e._v("在Maven的pom.xml文件中，Build相关配置包含两个部分，一个是"),t("build",[e._v("，另一个是"),t("reporting",[e._v("，这里我们只介绍"),t("build",[e._v("。")])],1)],1)],1),e._v(" "),t("p",[t("strong",[e._v("1.pom.xml中的两种build")])]),e._v(" "),t("p",[e._v("在Maven的pom.xml文件中，存在如下两种"),t("build",[e._v("：")])],1),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/2018032814571560",alt:"img"}})]),e._v(" "),t("p",[e._v("说明：")]),e._v(" "),t("p",[e._v("一种"),t("build",[e._v("被称为Project Build，即是"),t("project",[e._v("的直接子元素。另一种"),t("build",[e._v("被称为Profile Build，即是"),t("profile",[e._v("的直接子元素。")])],1)],1)],1)],1),e._v(" "),t("p",[e._v("Profile Build包含了基本的build元素，而Project Build还包含两个特殊的元素，即各种<...Directory>和"),t("extensions",[e._v("。")])],1),e._v(" "),t("p",[t("strong",[e._v("2.Profile Build和Project Build的共有元素")])]),e._v(" "),t("ol",[t("li",[e._v("共用的基本build元素")])]),e._v(" "),t("p",[e._v("示例如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/2018032814573147",alt:"img"}})]),e._v(" "),t("p",[e._v("说明：")]),e._v(" "),t("ul",[t("li",[e._v("defaultGoal，执行构建时默认的goal或phase，如jar:jar或者package等")]),e._v(" "),t("li",[e._v("directory，构建的结果所在的路径，默认为${basedir}/target目录")]),e._v(" "),t("li",[e._v("finalName，构建的最终结果的名字，该名字可能在其他plugin中被改变")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("resources")],1)]),e._v(" "),t("p",[e._v("资源往往不是代码，无需编译，而是一些properties或XML配置文件，构建过程中会往往会将资源文件从源路径复制到指定的目标路径。")]),e._v(" "),t("p",[t("resources",[e._v("给出各个资源在Maven项目中的具体路径。示例如下：")])],1),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20180328145749880",alt:"img"}})]),e._v(" "),t("p",[e._v("说明：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("resources，build过程中涉及的资源文件")])]),e._v(" "),t("li",[t("p",[e._v("targetPath，资源文件的目标路径")])]),e._v(" "),t("li",[t("p",[e._v("filtering，构建过程中是否对资源进行过滤，默认false")])]),e._v(" "),t("li",[t("p",[e._v("directory，资源文件的路径，默认位于${basedir}/src/main/resources/目录下")])]),e._v(" "),t("li",[t("p",[e._v("includes，一组文件名的匹配模式，被匹配的资源文件将被构建过程处理")])]),e._v(" "),t("li",[t("p",[e._v("excludes，一组文件名的匹配模式，被匹配的资源文件将被构建过程忽略。同时被includes和excludes匹配的资源文件，将被忽略。")])]),e._v(" "),t("li",[t("p",[e._v("filters，给出对资源文件进行过滤的属性文件的路径，默认位于${basedir}/src/main/filters/目录下。属性文件中定义若干键值对。在构建过程中，对于资源文件中出现的变量（键），将使用属性文件中该键对应的值替换。")])]),e._v(" "),t("li",[t("p",[e._v("testResources，test过程中涉及的资源文件，默认位于${basedir}/src/test/resources/目录下。这里的资源文件不会被构建到目标构件中")])])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("plugins")],1)]),e._v(" "),t("p",[t("plugins",[e._v("给出构建过程中所用到的插件。")])],1),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20180328145805453",alt:"img"}})]),e._v(" "),t("p",[e._v("说明：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("groupId")])]),e._v(" "),t("li",[t("p",[e._v("artifactId")])]),e._v(" "),t("li",[t("p",[e._v("version")])]),e._v(" "),t("li",[t("p",[e._v("extensions，是否加载该插件的扩展，默认false")])]),e._v(" "),t("li",[t("p",[e._v("inherited，该插件的configuration中的配置是否可以被（继承该POM的其他Maven项目）继承，默认true")])]),e._v(" "),t("li",[t("p",[e._v("configuration，该插件所需要的特殊配置，在父子项目之间可以覆盖或合并")])]),e._v(" "),t("li",[t("p",[e._v("dependencies，该插件所特有的依赖类库")])]),e._v(" "),t("li",[t("p",[e._v("executions，该插件的某个goal（一个插件中可能包含多个goal）的执行方式。一个execution有如下设置：")])]),e._v(" "),t("li",[t("p",[e._v("id，唯一标识")])]),e._v(" "),t("li",[t("p",[e._v("goals，要执行的插件的goal（可以有多个），如"),t("goal",[e._v("run")])],1)]),e._v(" "),t("li",[t("p",[e._v("phase，插件的goal要嵌入到Maven的phase中执行，如verify")])]),e._v(" "),t("li",[t("p",[e._v("inherited，该execution是否可被子项目继承")])]),e._v(" "),t("li",[t("p",[e._v("configuration，该execution的其他配置参数")])])]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("pluginManagement")],1)]),e._v(" "),t("p",[e._v("在"),t("build",[e._v("中，"),t("pluginManagement",[e._v("与"),t("plugins",[e._v("并列，两者之间的关系类似于"),t("dependencyManagement",[e._v("与"),t("dependencies",[e._v("之间的关系。"),t("pluginManagement",[e._v("中也配置"),t("plugin",[e._v("，其配置参数与"),t("plugins",[e._v("中的"),t("plugin",[e._v("完全一致。只是，"),t("pluginManagement",[e._v("往往出现在父项目中，其中配置的"),t("plugin",[e._v("往往通用于子项目。子项目中只要在"),t("plugins",[e._v("中以"),t("plugin",[e._v("声明该插件，该插件的具体配置参数则继承自父项目中"),t("pluginManagement",[e._v("对该插件的配置，从而避免在子项目中进行重复配置。")])],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),t("p",[t("strong",[e._v("3. Project Build特有的<...Directory>")])]),e._v(" "),t("p",[e._v("往往配置在父项目中，供所有父子项目使用。示例如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20180328145822913",alt:"img"}})]),e._v(" "),t("p",[e._v("目录可以使用绝对路径，如示例所示。如果使用相对路径，则所有的相对路径都是在${basedir}目录下。")]),e._v(" "),t("p",[t("strong",[e._v("4. Project Build特有的"),t("extensions")],1)]),e._v(" "),t("p",[t("extensions",[e._v("是执行构建过程中可能用到的其他工具，在执行构建的过程中被加入到classpath中。")])],1),e._v(" "),t("p",[e._v("也可以通过"),t("extensions",[e._v("激活构建插件，从而改变构建的过程。")])],1),e._v(" "),t("p",[e._v("通常，通过"),t("extensions",[e._v("给出通用插件的一个具体实现，用于构建过程。")])],1),e._v(" "),t("p",[t("extensions",[e._v("的使用示例如下：")])],1),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20180328145834997",alt:"img"}})]),e._v(" "),t("p",[e._v("==================================================================")]),e._v(" "),t("p",[e._v("****************************** maven默认的输入输出目录 ************************************")]),e._v(" "),t("p",[e._v("==================================================================")]),e._v(" "),t("p",[e._v("构建Maven项目的时候，如果没有进行特殊的配置，Maven会按照标准的目录结构查找和处理各种类型文件。")]),e._v(" "),t("p",[t("strong",[e._v("src/main/java和src/test/java")])]),e._v(" "),t("p",[e._v("这两个目录中的所有*.java文件会分别在comile和test-comiple阶段被编译，编译结果分别放到了target/classes和targe/test-classes目录中，但是这两个目录中的其他文件都会被忽略掉。")]),e._v(" "),t("p",[t("strong",[e._v("src/main/resouces和src/test/resources")])]),e._v(" "),t("p",[e._v("这两个目录中的文件也会分别被复制到target/classes和target/test-classes目录中。")]),e._v(" "),t("p",[e._v("当是web项目时，会在target下生成myproject目录，myproject是你的项目名")]),e._v(" "),t("p",[t("strong",[e._v("src/main/webapps")])]),e._v(" "),t("p",[e._v("这个目录中的文件会被复制到target/myProject目录中")]),e._v(" "),t("p",[t("strong",[e._v("target/classes")])]),e._v(" "),t("p",[e._v("默认会把这个目录中的所有内容复制到target/myProject/WEB-INF/classes目录中")]),e._v(" "),t("p",[e._v("Dependency")]),e._v(" "),t("p",[e._v("默认会将项目的依赖复制到target/myProject/WEB-INF/lib")])])}),[],!1,null,null,null);v.default=l.exports}}]);