(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{488:function(t,s,a){"use strict";a.r(s);var n=a(20),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"innodb数据页结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb数据页结构"}},[t._v("#")]),t._v(" InnoDB数据页结构")]),t._v(" "),a("p",[t._v("[toc]")]),t._v(" "),a("h2",{attrs:{id:"不同类型页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同类型页"}},[t._v("#")]),t._v(" 不同类型页")]),t._v(" "),a("p",[t._v("InnoDB存储引擎为了出于不同的存储目的设计多种类型的页，比如")]),t._v(" "),a("p",[t._v("存放表空间头部信息的页，存放 Insert Buffer信息的页，存放 INODE 信息的页，存放 undo 日志信息的页等等等等")]),t._v(" "),a("p",[t._v("其中这次重点介绍："),a("strong",[t._v("存放数据表中记录的那种类型的页，官方称这种存放记录的页为索引（ INDEX ）页")])]),t._v(" "),a("h2",{attrs:{id:"数据页结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据页结构"}},[t._v("#")]),t._v(" 数据页结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213170828841.png",alt:"image-20220213170828841"}})]),t._v(" "),a("p",[t._v("InnoDB 数据页的存储空间大致被划分成了 7 个部分")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("中文名")]),t._v(" "),a("th",[t._v("占用空间大小")]),t._v(" "),a("th",[t._v("简单描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("File Header")]),t._v(" "),a("td",[t._v("文件头部")]),t._v(" "),a("td",[t._v("38字节")]),t._v(" "),a("td",[t._v("页的一些通用信息")])]),t._v(" "),a("tr",[a("td",[t._v("Page Header")]),t._v(" "),a("td",[t._v("页面头部")]),t._v(" "),a("td",[t._v("56字节")]),t._v(" "),a("td",[t._v("数据页专有的一些信息")])]),t._v(" "),a("tr",[a("td",[t._v("Infimum + Supremum")]),t._v(" "),a("td",[t._v("最小记录和最大记录")]),t._v(" "),a("td",[t._v("26字节")]),t._v(" "),a("td",[t._v("两个虚拟的行记录")])]),t._v(" "),a("tr",[a("td",[t._v("User Records")]),t._v(" "),a("td",[t._v("用户记录")]),t._v(" "),a("td",[t._v("不确定")]),t._v(" "),a("td",[t._v("实际存储行记录内容")])]),t._v(" "),a("tr",[a("td",[t._v("Free Space")]),t._v(" "),a("td",[t._v("空闲空间")]),t._v(" "),a("td",[t._v("不确定")]),t._v(" "),a("td",[t._v("页中尚未使用的空间")])]),t._v(" "),a("tr",[a("td",[t._v("Page Directory")]),t._v(" "),a("td",[t._v("页面目录")]),t._v(" "),a("td",[t._v("不确定")]),t._v(" "),a("td",[t._v("页中的某些记录的相对位置")])]),t._v(" "),a("tr",[a("td",[t._v("File Trailer")]),t._v(" "),a("td",[t._v("文件尾部")]),t._v(" "),a("td",[t._v("8字节")]),t._v(" "),a("td",[t._v("校验页是否完整")])])])]),t._v(" "),a("h2",{attrs:{id:"记录在页中的储存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记录在页中的储存"}},[t._v("#")]),t._v(" 记录在页中的储存")]),t._v(" "),a("p",[t._v("在页的7个组成部分中，我们自己存储的记录会按照我们指定的 "),a("code",[t._v("行格式")]),t._v(" 存储到 User Records 部分。"),a("strong",[t._v("但是在一开始生成页的时候，其实并没有 User Records 这个部分")]),t._v("，每当我们插入一条记录，都会从 Free Space 部分，也就是尚未使用的存储空间中"),a("strong",[t._v("申请一个记录大小的空间划分到 User Records 部分")]),t._v("，当 Free Space 部分的空间全部被 User Records 部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了，这个过程的图示如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213171941626.png",alt:"image-20220213171941626"}})]),t._v(" "),a("p",[t._v("你以为插入记录就是这么简单吗，不！这只是大概的过程，要具体了解这个过程还得从"),a("code",[t._v("行格式")]),t._v("的变化说起")]),t._v(" "),a("p",[t._v("###记录信息头的秘密")]),t._v(" "),a("p",[t._v("为了更好的了解记录在页变化的过程，我们先创建一个表，插入四条数据")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> CREATE TABLE page_demo( \n   ->     c1 INT, \n   ->     c2 INT, \n   ->     c3 VARCHAR(10000), \n   ->     PRIMARY KEY (c1) \n   -> ) CHARSET=ascii ROW_FORMAT=Compact; \nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> INSERT INTO page_demo VALUES(1, 100, 'aaaa'), (2, 200, 'bbbb'), (3, 300, 'cccc'),\n(4, 400, 'dddd'); \nQuery OK, 4 rows affected (0.00 sec) \nRecords: 4  Duplicates: 0  Warnings: 0\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("blockquote",[a("p",[t._v("这个新创建的 page_demo 表有3个列，其中 c1 和 c2 列是用来存储整数的， c3 列是用来存储字符串的。需要注意的是，我们把 c1 列指定为主键，所以在具体的行格式中InnoDB就没必要为我们去创建那个所谓的 row_id 隐藏列了。而且我们为这个表"),a("strong",[t._v("指定了 ascii 字符集以及 Compact 的行格式")]),t._v("。")])]),t._v(" "),a("p",[t._v("所以这个表中记录的行格式示意图就是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213173112227.png",alt:"image-20220213173112227"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("大小（单位：bit）")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("预留位1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("没有使用")])]),t._v(" "),a("tr",[a("td",[t._v("预留位2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("没有使用")])]),t._v(" "),a("tr",[a("td",[t._v("delete_mask")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("标记该记录是否被删除")])]),t._v(" "),a("tr",[a("td",[t._v("min_rec_mask")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("B+树的每层非叶子节点中的最小记录都会添加该标记")])]),t._v(" "),a("tr",[a("td",[t._v("n_owned")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("表示当前记录拥有的记录数")])]),t._v(" "),a("tr",[a("td",[t._v("heap_no")]),t._v(" "),a("td",[t._v("13")]),t._v(" "),a("td",[t._v("表示当前记录在记录堆的位置信息")])]),t._v(" "),a("tr",[a("td",[t._v("record_type")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("表示当前记录的类型， 0 表示普通记录， 1 表示B+树非叶节点记录， 2 表示最小记录， 3表示最大记录")])]),t._v(" "),a("tr",[a("td",[t._v("next_record")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("表示下一条记录的相对位置")])])])]),t._v(" "),a("ul",[a("li",[t._v("delete_mask")])]),t._v(" "),a("p",[t._v("这个属性标记着当前记录是否被删除，占用1个二进制位，值为 0 的时候代表记录并没有被删除，为 1 的时\n候代表记录被删除掉了。啥？被删除的记录还在 页 中么？是的，摆在台面上的和背地里做的可能大相径庭，你以为它删除了，可它\n还在真实的磁盘上[摊手]（忽然想起冠希～）。"),a("strong",[t._v("这些被删除的记录之所以不立即从磁盘上移除")]),t._v("，是因为移除它们之后把其他的记录在磁盘上重新排列需要性能消耗，所以只是打一个删除标记而已，"),a("strong",[t._v("所有被删除掉的记录都会组成一个所谓的 垃圾链表")]),t._v(" ，在这个链表中的记录占用的空间称之为所谓的 可重用空间 ，之后如果有新记录插入到表中的话，可能把这些被删除的记录占用的存储空间覆盖掉。")]),t._v(" "),a("ul",[a("li",[t._v("next_record")])]),t._v(" "),a("p",[t._v("这玩意儿非常重要，说白了就是"),a("strong",[t._v("单向链表的存放了下个节点的地址")]),t._v("。它表示从"),a("strong",[t._v("当前记录的真实数据到下一条记录的真实数据的地址偏移量")]),t._v("。比方说第一条记录的 next_record 值为 32 ，意味着从第一条记录的真实数据的地址处向后找 32 个字节便是下一条记录的真实数据。如果你熟悉数据结构的话，就立即明白了，这其实是个 链表 ，可以通过一条记录找到它的下一条记录。但是需要注意注意再注意的一点是， "),a("strong",[t._v("下一条记录 指得并不是按照我们插入顺序的下一条记录，而是按照主键值由小到大的顺序的下一条记录")]),t._v("。而且规定 Infimum记录（也就是最小记录） 的下一条记录就是本页中主键值最小的用户记录，而本页中主键值最大的用户记录的下一条记录就是 Supremum记录（也就是最大记录） ，为了更形象的表示一下这个 next_record 起到的作用，我们用箭头来替代一下\nnext_record 中的地址偏移量：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213174154874.png",alt:"image-20220213174154874"}})]),t._v(" "),a("h2",{attrs:{id:"page-directory-页目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#page-directory-页目录"}},[t._v("#")]),t._v(" Page Directory（页目录）")]),t._v(" "),a("p",[t._v("上面我们可以知道记录在页中是以单向链表的形式存在，如果我们要查找一条记录，比如下面")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" page_demo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("最笨的办法：从 Infimum 记录（最小记录）开始，沿着链表一直往后找，总有一天会找到（或者找不到[摊手]），在找的时候还能投机取巧，因为链表中各个记录的值是按照从小到大顺序排列的，所以当链表的某个节点代表的记录的主键值大于你想要查找的主键值时，你就可以停止查找了，因为该节点后边的节点的主键值依次递增。时间复杂度为O(n)。")]),t._v(" "),a("p",[t._v("但是设计InnoDB的大叔们可没有那么笨，他们采取了类似二分查找的方法，来查询记录；")]),t._v(" "),a("ol",[a("li",[t._v("将所有"),a("strong",[t._v("正常的记录")]),t._v("（包括最大和最小记录，不包括标记为已删除的记录）"),a("strong",[t._v("划分为几个组")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("每个组的最后一条记录")]),t._v("（也就是组内最大的那条记录）的头信息中的 "),a("code",[t._v("n_owned")]),t._v(" 属性表示该记录拥有多少条记录，也就是"),a("strong",[t._v("该组内共有几条记录")]),t._v("。")]),t._v(" "),a("li",[t._v("将"),a("strong",[t._v("每个组的最后一条记录的地址偏移量")]),t._v("单独"),a("strong",[t._v("提取出来按顺序存储到靠近 "),a("code",[t._v("页")]),t._v("的尾部的地方")]),t._v("，这个地方就是所谓的 Page Directory ，也就是 "),a("code",[t._v("页目录")]),t._v(" （此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为 "),a("code",[t._v("槽")]),t._v("（英文名： Slot ），所以这个页面目录就是由 "),a("code",[t._v("槽")]),t._v("组成的。")])]),t._v(" "),a("p",[t._v("比方说现在的 page_demo 表中正常的记录共有6条， InnoDB 会把它们分成两组，第一组中只有一个最小记录，第二组中是剩余的5条记录，看下边的示意图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213183520359.png",alt:"image-20220213183520359"}})]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("现在 页目录 部分中有两个槽，也就意味着我们的记录被分成了两个组， 槽1 中的值是 112 ，代表最大记录的地址偏移量（就是从页面的0字节开始数，数112个字节）； 槽0 中的值是 99 ，代表最小记录的地址偏移量。")]),t._v(" "),a("li",[t._v("注意最小和最大记录的头信息中的 n_owned 属性最小记录的 n_owned 值为 1 ，这就代表着以最小记录结尾的这个分组中只有 1 条记录，也就是最小记录本身。")]),t._v(" "),a("li",[t._v("最大记录的 n_owned 值为 5 ，这就代表着以最大记录结尾的这个分组中只有 5 条记录，包括最大记录本身还有我们自己插入的 4 条记录。")])]),t._v(" "),a("p",[a("strong",[t._v("为什么最小记录的 n_owned 值为1，而最大记录的 n_owned 值为 5 呢，这里头有什么猫腻么？")])]),t._v(" "),a("blockquote",[a("p",[t._v("设计 InnoDB 的大叔们对每个分组中的记录条数是有规定的：")]),t._v(" "),a("p",[a("strong",[t._v("对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1~8 条之间，")])]),t._v(" "),a("p",[a("strong",[t._v("剩下的分组中记录的条数范围只能在是 4~8 条之间")]),t._v("。")])]),t._v(" "),a("p",[t._v("###查找过程")]),t._v(" "),a("p",[t._v("往表里面再添加12条记录")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" page_demo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eeee'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ffff'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("700")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gggg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hhhh'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("900")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'iiii'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jjjj'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kkkk'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'l\nlll'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mmmm'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nnnn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'oooo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1600")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pppp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nQuery OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \nRecords: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("  Duplicates: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Warnings")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("现在页里边就一共有18条记录了（包括最小和最大记录），这些记录被分成了5个组，如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213184021833.png",alt:"image-20220213184021833"}})]),t._v(" "),a("p",[t._v("因为把16条记录的全部信息都画在一张图里太占地方，让人眼花缭乱的，所以"),a("strong",[t._v("只保留了用户记录头信息中的"),a("code",[t._v("n_owned")]),t._v(" 和 "),a("code",[t._v("next_record")]),t._v(" 属性")]),t._v("，也省略了各个记录之间的箭头，我没画不等于没有啊！现在看怎么从这个 "),a("code",[t._v("页目录")]),t._v("中查找记录。因为各个槽代表的记录的主键值都是从小到大排序的，所以我们可以使用所谓的 "),a("code",[t._v("二分法")]),t._v(" 来进行快速查找。")]),t._v(" "),a("p",[t._v("4个槽的编号分别是： 0 、 1 、 2 、 3 、 4 ，所以初始情况下最低的槽就是 low=0 ，最高的槽就是high=4 。比方说我们想找主键值为 6 的记录，过程是这样的：")]),t._v(" "),a("ol",[a("li",[t._v("计算中间槽的位置： (0+4)/2=2 ，所以查看 槽2 对应记录的主键值为 8 ，又因为 8 > 6 ，所以设置high=2 ， low 保持不变。")]),t._v(" "),a("li",[t._v("重新计算中间槽的位置： (0+2)/2=1 ，所以查看 槽1 对应的主键值为 4 ，又因为 4 < 6 ，所以设置low=1 ， high 保持不变。")]),t._v(" "),a("li",[t._v("因为 "),a("strong",[t._v("high - low 的值为1")]),t._v("，所以确定主键值为 5 的记录在 槽2 对应的组中。此刻我们需要找到 "),a("strong",[t._v("槽2 中主键值最小的那条记录")]),t._v("，然后沿着单向链表遍历 槽2 中的记录。但是我们前边又说过，每个槽对应的记录都是该组中主键值最大的记录，这里 槽2 对应的记录是主键值为 8 的记录，怎么定位一个组中最小的记录呢？别忘了各个槽都是挨着的，我们可以很轻易的拿到 槽1 对应的记录（主键值为 4 ），该条记录的下一条记录就是 槽2 中主键值最小的记录，该记录的主键值为 5 。所以我们可以从这条主键值为 5 的记录出发，遍历 槽2 中的各条记录，直到找到主键值为 6 的那条记录即可。由于一个组中包含的记录条数只能是1~8条，所以\n遍历一个组中的记录的代价是很小的。所以在一个数据页中查找指定主键值的记录的过程分为两步：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。")])]),t._v(" "),a("li",[a("strong",[t._v("通过记录的 next_record 属性遍历该槽所在的组中的各个记录。")])])]),t._v(" "),a("h2",{attrs:{id:"page-header-页面头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#page-header-页面头部"}},[t._v("#")]),t._v(" Page Header（页面头部）")]),t._v(" "),a("p",[t._v("设计 InnoDB 的大叔们为了能得到一个数据页中"),a("strong",[t._v("存储的记录的状态信息")]),t._v("，比如本页中已经存储了多少条记录，第一条记录的地址是什么，页目录中存储了多少个槽等等，特意在页中定义了一个叫 Page Header 的部分，它是"),a("code",[t._v("页")]),t._v(" 结构的第二部分，这个部分占用固定的 56 个字节，专门存储各种状态信息")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213184441133.png",alt:"image-20220213184441133"}})]),t._v(" "),a("h2",{attrs:{id:"file-header-文件头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-header-文件头部"}},[t._v("#")]),t._v(" File Header（文件头部）")]),t._v(" "),a("p",[t._v("File Header 针对各种类型的页都通用，也就是说不同类型的页都会以 File Header 作为第一个组成部分，它"),a("strong",[t._v("描述了一些针对各种页都通用的一些信息")]),t._v("，比方说这个页的编号是多少，它的上一个页、下一个页是谁啦吧啦吧啦～ 这个部分占用固定的 38 个字节，是由下边这些内容组成的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213184532332.png",alt:"image-20220213184532332"}})]),t._v(" "),a("p",[t._v("每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zxqzhuzhu/imgs/raw/master/picGo/image-20220213184847010.png",alt:"image-20220213184847010"}})]),t._v(" "),a("h2",{attrs:{id:"file-trailer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-trailer"}},[t._v("#")]),t._v(" File Trailer")]),t._v(" "),a("p",[t._v("我们知道 InnoDB 存储引擎会把数据存储到磁盘上，但是磁盘速度太慢，需要以 页 为单位把数据加载到内存中处理，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办，这不是莫名尴尬么？"),a("strong",[t._v("为了检测一个页是否完整")]),t._v("（也就是在同步的时候有没有发生只同步一半的尴尬情况），设计 InnoDB 的大叔们在每个页的尾部都加了一个 File Trailer 部分，这个部分由 8 个字节组成，可以分成2个小部分：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("前4个字节代表页的校验和")])])]),t._v(" "),a("p",[t._v("这个部分是和 File Header 中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为 File Header 在页面的前边，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在 File Header 中的校验和就代表着已经修改过的页，而在 File Trialer 中的校验和代表着原先的页，二者不同则意味着同步中间出了错。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("后4个字节代表页面被最后修改时对应的日志序列位置（LSN）")])])]),t._v(" "),a("p",[t._v("这个部分也是为了校验页的完整性的，只不过我们目前还没说 LSN 是个什么意思，所以大家可以先不用管这个属性。\n这个 File Trailer 与 File Header 类似，都是所有类型的页通用的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);